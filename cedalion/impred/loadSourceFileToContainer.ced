annotation:shrink('/bootstrap':signature(loadSourceFileToContainer(SourcePath,SourceNS,Container)::impred,[SourcePath::'/bootstrap':string,SourceNS::'/bootstrap':string,Container::'/bootstrap':string])).
'/util':behavior(loadSourceFileToContainer(FileName,NS,Container)::impred,!'should assert containerized statements', (simulate(loadSourceFileToContainer(!'foo.ced',!'/bar',!myContainer),[task(readSourceFile(!'foo.ced',!'/bar'),annotation:changeMode([builtin:loadedStatement(!'foo.ced', (foo(3):-builtin:true),[]),builtin:loadedStatement(!'foo.ced', (foo(4):-builtin:true),[])],'/bootstrap':vert),'/bootstrap':list('/bootstrap':pred)),task(assert(S1),_,'/nodalion':voidType),task(assert(S2),_,'/nodalion':voidType),task(assert(S3),_,'/nodalion':voidType),task(assert(S4),_,'/nodalion':voidType)],true),'/bootstrap':true('/containers':containerize((foo(3):-builtin:true)::'/bootstrap':statement,S1::'/bootstrap':statement,!myContainer)),'/bootstrap':true('/containers':containerize((builtin:loadedStatement(!'foo.ced', (foo(3):-builtin:true),[]):-builtin:true)::'/bootstrap':statement,S2::'/bootstrap':statement,!myContainer)))).
'/bootstrap':signature(assert(S)::task('/nodalion':voidType),[S::'/bootstrap':statement]).
'/bootstrap':signature(readSourceFile(FileName,NS)::task('/bootstrap':list('/bootstrap':pred)),[FileName::'/bootstrap':string,NS::'/bootstrap':string]).
annotation:shrink(clause(loadSourceFileToContainer(FileName,NS,Container),conj(task(readSourceFile(FileName,NS),Statements,'/bootstrap':list('/bootstrap':pred)),assertStatementsInContainer(Statements,Container)))).
'/bootstrap':signature(assertStatementsInContainer(Statements,Container)::impred,[Statements::'/bootstrap':list('/bootstrap':pred),Container::'/bootstrap':string]).
clause(assertStatementsInContainer([],_),true).
annotation:shrink(clause(assertStatementsInContainer([builtin:loadedStatement(FileName,Statement,VNs)|Statements],Container),conj(assertContainerized(Statement,Container),conj(assertContainerized((builtin:loadedStatement(FileName,Statement,VNs):-builtin:true),Container),assertStatementsInContainer(Statements,Container))))).
'/bootstrap':signature(assertContainerized(Statement,Container)::impred,[Statement::'/bootstrap':statement,Container::'/bootstrap':string]).
annotation:shrink(clause(assertContainerized(Statement,Container),conj(pred('/containers':containerize(Statement::'/bootstrap':statement,StatementPrime::'/bootstrap':statement,Container)),task(assert(StatementPrime),_,'/nodalion':voidType)))).
'/bootstrap':signature(removeSourceFileFromContainer(FileName,Container)::impred,[FileName::'/bootstrap':string,Container::'/bootstrap':string]).
annotation:shrink(clause(removeSourceFileFromContainer(FileName,Container),conj(pred(builtin:findall('/containers':loadedStatement(FileName,Container,Statement,VNs),'/bootstrap':pred,'/containers':loadedStatement(FileName,Container,Statement,VNs),Loaded)),retractStatements(Loaded)))).
'/bootstrap':signature(retractStatements(Loaded)::impred,[Loaded::'/bootstrap':list('/bootstrap':pred)]).
clause(retractStatements([]),true).
'/bootstrap':signature(retract(Statement)::task('/nodalion':voidType),[Statement::'/bootstrap':statement]).
annotation:shrink(clause(retractStatements(['/containers':loadedStatement(FileName,Container,Statement,VNs)|Loaded]),conj(task(retract(Statement),_,'/nodalion':voidType),conj(task(retract(('/containers':loadedStatement(FileName,Container,Statement,VNs):-builtin:true)),_,'/nodalion':voidType),retractStatements(Loaded))))).
